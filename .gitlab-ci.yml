stages:
  - unit-tests
  - moderator
  - ubuntu-part1
  - ubuntu-part2
  - ubuntu-part3
  - coreos-part1
  - coreos-part2
  - centos-part1
  - centos-part2
  - addons
  - manual-parts

variables:
  FAILFASTCI_NAMESPACE: 'kargo-ci'
  GITLAB_REPOSITORY: 'kargo-ci/kubernetes-incubator__kubespray'
#  DOCKER_HOST: tcp://localhost:2375
  ANSIBLE_FORCE_COLOR: "true"
  MAGIC: "ci check this"
  TEST_ID: "$CI_PIPELINE_ID-$CI_BUILD_ID"
  CI_TEST_VARS: "./tests/files/${CI_JOB_NAME}.yml"
  GS_ACCESS_KEY_ID: $GS_KEY
  GS_SECRET_ACCESS_KEY: $GS_SECRET
  CONTAINER_ENGINE: docker
  SSH_USER: root
  GCE_PREEMPTIBLE: "false"
  ANSIBLE_KEEP_REMOTE_FILES: "1"
  ANSIBLE_CONFIG: ./tests/ansible.cfg
  ANSIBLE_INVENTORY: ./inventory/sample/${CI_JOB_NAME}-${BUILD_NUMBER}.ini
  IDEMPOT_CHECK: "false"
  RESET_CHECK: "false"
  UPGRADE_TEST: "false"
  LOG_LEVEL: "-vv"

before_script:
    - /usr/bin/python -m pip install -r tests/requirements.txt
    - mkdir -p /.ssh

.job: &job
  tags:
    - kubernetes
    - docker
  image: quay.io/kubespray/kubespray:v2.7

.docker_service: &docker_service
  services:
     - docker:dind

.create_cluster: &create_cluster
  <<: *job
  <<: *docker_service

.gce_variables: &gce_variables
  GCE_USER: travis
  SSH_USER: $GCE_USER
  CLOUD_MACHINE_TYPE: "g1-small"
  CI_PLATFORM: "gce"
  PRIVATE_KEY: $GCE_PRIVATE_KEY

.do_variables: &do_variables
  PRIVATE_KEY: $DO_PRIVATE_KEY
  CI_PLATFORM: "do"
  SSH_USER: root

.testcases: &testcases
  <<: *job
  <<: *docker_service
  cache:
    key: "$CI_BUILD_REF_NAME"
    paths:
      - downloads/
      - $HOME/.cache
  before_script:
    - docker info
    - /usr/bin/python -m pip install -r requirements.txt
    - /usr/bin/python -m pip install -r tests/requirements.txt
    - mkdir -p /.ssh
    - mkdir -p $HOME/.ssh
    - ansible-playbook --version
    - export PYPATH=$([[ ! "$CI_JOB_NAME" =~ "coreos" ]] && echo /usr/bin/python || echo /opt/bin/python)
    - echo "CI_JOB_NAME is $CI_JOB_NAME"
    - echo "PYPATH is $PYPATH"
  script:
    - pwd
    - ls
    - echo ${PWD}
    - echo "${STARTUP_SCRIPT}"
    - cd tests && make create-${CI_PLATFORM} -s ; cd -

    # Check out latest tag if testing upgrade
    # Uncomment when gitlab kubespray repo has tags
    #- test "${UPGRADE_TEST}" != "false" && git fetch --all && git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
    - test "${UPGRADE_TEST}" != "false" && git checkout 53d87e53c5899d4ea2904ab7e3883708dd6363d3
    # Checkout the CI vars file so it is available
    - test "${UPGRADE_TEST}" != "false" && git checkout "${CI_BUILD_REF}" tests/files/${CI_JOB_NAME}.yml
    # Workaround https://github.com/kubernetes-incubator/kubespray/issues/2021
    - 'sh -c "echo ignore_assert_errors: true | tee -a tests/files/${CI_JOB_NAME}.yml"'


    # Create cluster
    - >
      ansible-playbook
      -i ${ANSIBLE_INVENTORY}
      -b --become-user=root
      --private-key=${HOME}/.ssh/id_rsa
      -u $SSH_USER
      ${SSH_ARGS}
      ${LOG_LEVEL}
      -e @${CI_TEST_VARS}
      -e ansible_ssh_user=${SSH_USER}
      -e local_release_dir=${PWD}/downloads
      --limit "all:!fake_hosts"
      cluster.yml

    # Repeat deployment if testing upgrade
    - >
      if [ "${UPGRADE_TEST}" != "false" ]; then
      test "${UPGRADE_TEST}" == "basic" && PLAYBOOK="cluster.yml";
      test "${UPGRADE_TEST}" == "graceful" && PLAYBOOK="upgrade-cluster.yml";
      git checkout "${CI_BUILD_REF}";
      ansible-playbook
      -i ${ANSIBLE_INVENTORY}
      -b --become-user=root
      --private-key=${HOME}/.ssh/id_rsa
      -u $SSH_USER
      ${SSH_ARGS}
      ${LOG_LEVEL}
      -e @${CI_TEST_VARS}
      -e ansible_ssh_user=${SSH_USER}
      -e local_release_dir=${PWD}/downloads
      --limit "all:!fake_hosts"
      $PLAYBOOK;
      fi

    # Tests Cases
    ## Test Master API
    - >
      ansible-playbook -i ${ANSIBLE_INVENTORY} -e ansible_python_interpreter=${PYPATH} -u $SSH_USER -e ansible_ssh_user=$SSH_USER $SSH_ARGS -b --become-user=root --limit "all:!fake_hosts" tests/testcases/010_check-apiserver.yml $LOG_LEVEL
      -e "{kubeadm_enabled: ${KUBEADM_ENABLED}}"

    ## Ping the between 2 pod
    - ansible-playbook -i ${ANSIBLE_INVENTORY} -e ansible_python_interpreter=${PYPATH} -u $SSH_USER -e ansible_ssh_user=$SSH_USER $SSH_ARGS -b --become-user=root --limit "all:!fake_hosts" tests/testcases/030_check-network.yml $LOG_LEVEL

    ## Advanced DNS checks
    - ansible-playbook -i ${ANSIBLE_INVENTORY} -e ansible_python_interpreter=${PYPATH} -u $SSH_USER -e ansible_ssh_user=$SSH_USER $SSH_ARGS -b --become-user=root --limit "all:!fake_hosts" tests/testcases/040_check-network-adv.yml $LOG_LEVEL

    ## Idempotency checks 1/5 (repeat deployment)
    - >
      if [ "${IDEMPOT_CHECK}" = "true" ]; then
      ansible-playbook
      -i ${ANSIBLE_INVENTORY}
      -b --become-user=root
      --private-key=${HOME}/.ssh/id_rsa
      -u $SSH_USER
      ${SSH_ARGS}
      ${LOG_LEVEL}
      -e @${CI_TEST_VARS}
      -e ansible_python_interpreter=${PYPATH}
      -e local_release_dir=${PWD}/downloads
      --limit "all:!fake_hosts"
      cluster.yml;
      fi

    ## Idempotency checks 2/5 (Advanced DNS checks)
    - >
      if [ "${IDEMPOT_CHECK}" = "true" ]; then
      ansible-playbook
      -i ${ANSIBLE_INVENTORY}
      -b --become-user=root
      --private-key=${HOME}/.ssh/id_rsa
      -u $SSH_USER
      ${SSH_ARGS}
      ${LOG_LEVEL}
      -e @${CI_TEST_VARS}
      --limit "all:!fake_hosts"
      tests/testcases/040_check-network-adv.yml $LOG_LEVEL;
      fi

    ## Idempotency checks 3/5 (reset deployment)
    - >
      if [ "${IDEMPOT_CHECK}" = "true" -a "${RESET_CHECK}" = "true" ]; then
      ansible-playbook
      -i ${ANSIBLE_INVENTORY}
      -b --become-user=root
      --private-key=${HOME}/.ssh/id_rsa
      -u $SSH_USER
      ${SSH_ARGS}
      ${LOG_LEVEL}
      -e @${CI_TEST_VARS}
      -e ansible_python_interpreter=${PYPATH}
      -e reset_confirmation=yes
      --limit "all:!fake_hosts"
      reset.yml;
      fi

    ## Idempotency checks 4/5 (redeploy after reset)
    - >
      if [ "${IDEMPOT_CHECK}" = "true" -a "${RESET_CHECK}" = "true" ]; then
      ansible-playbook
      -i ${ANSIBLE_INVENTORY}
      -b --become-user=root
      --private-key=${HOME}/.ssh/id_rsa
      -u $SSH_USER
      ${SSH_ARGS}
      ${LOG_LEVEL}
      -e @${CI_TEST_VARS}
      -e ansible_python_interpreter=${PYPATH}
      -e local_release_dir=${PWD}/downloads
      --limit "all:!fake_hosts"
      cluster.yml;
      fi

    ## Idempotency checks 5/5 (Advanced DNS checks)
    - >
      if [ "${IDEMPOT_CHECK}" = "true" -a "${RESET_CHECK}" = "true" ]; then
      ansible-playbook -i ${ANSIBLE_INVENTORY} -e ansible_python_interpreter=${PYPATH}
      -u $SSH_USER -e ansible_ssh_user=$SSH_USER $SSH_ARGS -b --become-user=root
      --limit "all:!fake_hosts"
      tests/testcases/040_check-network-adv.yml $LOG_LEVEL;
      fi

  after_script:
    - cd tests && make delete-${CI_PLATFORM} -s ; cd -

.gce: &gce
  <<: *testcases
  variables:
    <<: *gce_variables

.do: &do
  variables:
    <<: *do_variables
  <<: *testcases

# Builds for PRs only (premoderated by unit-tests step) and triggers (auto)

ubuntu-1804-calico:
  stage: ubuntu-part1
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

ubuntu-1804-calico-kubeadm-ha:
  stage: ubuntu-part2
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

ubuntu-1804-flannel:
  stage: ubuntu-part3
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

ubuntu-1804-weave:
  stage: ubuntu-part3
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

coreos-stable-calico-aio:
  stage: coreos-part1
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

coreos-stable-flannel:
  stage: coreos-part2
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

coreos-stable-weave:
  stage: coreos-part2
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

centos-7-calico-sep:
  stage: centos-part1
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

centos-7-flannel:
  stage: centos-part2
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

centos-7-weave:
  stage: centos-part2
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

## Addons
ubuntu-1804-calico-addons:
  stage: addons
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: on_success
  except: ['triggers']
  only: [/^pr-.*$/]

# Manuel triggers for release
ubuntu-1804-calico-vault:
  stage: addons
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: [/^pr-.*$/]

ubuntu-1804-calico-coredns:
  stage: addons
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: [/^pr-.*$/]

coreos-stable-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

coreos-stable-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

coreos-stable-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1804-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1804-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1804-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

centos-7-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

centos-7-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

centos-7-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1604-calico:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1604-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1604-flannel:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1604-weave:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1604-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

ubuntu-1604-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

debian-8-calico:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

debian-8-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

debian-8-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

debian-8-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

debian-8-flannel:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

debian-8-weave:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

rhel-7-calico:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

rhel-7-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

rhel-7-flannel:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

rhel-7-weave:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

rhel-7-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

rhel-7-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

opensuse-leap-calico:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

opensuse-leap-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

opensuse-leap-flannel:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

opensuse-leap-weave:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

opensuse-leap-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

opensuse-leap-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

fedora-28-calico:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

fedora-28-canal:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

fedora-28-flannel:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

fedora-28-weave:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

fedora-28-cilium:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

fedora-28-contiv:
  stage: manual-parts
  <<: *job
  <<: *gce
  variables:
    <<: *gce_variables
  when: manual
  except: ['triggers']
  only: ['master', /^pr-.*$/]

# Premoderated with manual actions
ci-authorized:
  <<: *job
  stage: moderator
  before_script:
    - apt-get -y install jq
  script:
    - /bin/sh scripts/premoderator.sh
  except: ['triggers', 'master']

syntax-check:
  <<: *job
  stage: unit-tests
  script:
    - ansible-playbook -i inventory/local-tests.cfg -u root -e ansible_ssh_user=root  -b --become-user=root cluster.yml -vvv  --syntax-check
    - ansible-playbook -i inventory/local-tests.cfg -u root -e ansible_ssh_user=root  -b --become-user=root upgrade-cluster.yml -vvv  --syntax-check
    - ansible-playbook -i inventory/local-tests.cfg -u root -e ansible_ssh_user=root  -b --become-user=root reset.yml -vvv  --syntax-check
    - ansible-playbook -i inventory/local-tests.cfg -u root -e ansible_ssh_user=root  -b --become-user=root extra_playbooks/upgrade-only-k8s.yml -vvv  --syntax-check
  except: ['triggers', 'master']

yamllint:
  <<: *job
  stage: unit-tests
  script:
    - yamllint roles
  except: ['triggers', 'master']

tox-inventory-builder:
  stage: unit-tests
  <<: *job
  script:
    - pip install tox
    - cd contrib/inventory_builder && tox
  when: manual
  except: ['triggers', 'master']
