---

- name: Get the list of docker packages installed | Debian
  shell: "dpkg-query -W -f='${Package}|${Status}|${Version}' {{ item }} 2>/dev/null"
  register: deb_pkgs
  failed_when: deb_pkgs.rc == 2
  changed_when: False
  with_items:
    - docker-engine
    - docker-ce
  when: ansible_os_family == 'Debian'

- name: Check if its docker upgrade | Debian
  set_fact:
    is_docker_upgrade: True
  when:
    - ansible_os_family == 'Debian'
    - item.stdout != ""
    - (item.stdout.split('|')[0] ~ '-' ~ item.stdout.split('|')[2]) != docker_versioned_pkg[docker_version | string]
  with_items: "{{ deb_pkgs.results }}"

- name: Get the list of packages installed | Redhat
  yum:
    list: installed
  register: yum_packages
  changed_when: False
  when: ansible_os_family == 'RedHat'

- name: Check if its docker upgrade | Redhat
  set_fact:
    is_docker_upgrade: True
  when:
    - ansible_os_family == 'RedHat'
    - yum_packages.results | selectattr("name", "equalto", item) | map(attribute="name") | first | default('') != ""
    - yum_packages.results | selectattr("name", "equalto", item) | map(attribute="version") | first | default('') != ""
    - yum_packages.results | selectattr("name", "equalto", item) | map(attribute="release") | first | default('') != ""
    - >
      '-'.join((item, (yum_packages.results | selectattr("name", "equalto", item) | map(attribute="version") | first),
      (yum_packages.results | selectattr("name", "equalto", item) | map(attribute="release") | first))) not in
       [docker_versioned_pkg[docker_version | string],docker_selinux_versioned_pkg[docker_selinux_version | string]]
  with_items:
    - docker-engine
    - docker-engine-selinux
    - docker-ce
    - docker-ce-selinux

- name: Check the status of kubelet
  shell: systemctl is-active kubelet
  register: kubelet_status
  ignore_errors: yes
  changed_when: False
  when:
    - inventory_hostname in groups['k8s-cluster']
    - is_docker_upgrade is defined
    - is_docker_upgrade|bool

- name: Check the status of etcd
  shell: systemctl is-active etcd
  register: etcd_status
  ignore_errors: yes
  changed_when: False
  when:
    - inventory_hostname in groups['etcd']
    - is_docker_upgrade is defined
    - is_docker_upgrade|bool

- block:
    - name: Drain the nodes
      import_role:
        name: upgrade/pre-upgrade
      ignore_errors: yes
      when: inventory_hostname in groups['k8s-cluster']

    - name: Stop kubelet on the nodes
      service:
        name: kubelet
        state: stopped
      when:
        - inventory_hostname in groups['k8s-cluster']
        - kubelet_status is defined
        - kubelet_status.stdout == "active"

    - name: Stop etcd on the nodes
      service:
        name: etcd
        state: stopped
      when:
        - inventory_hostname in groups['etcd']
        - etcd_status is defined
        - etcd_status.stdout == "active"

    - name: Clean up and shut down docker
      script: clean-up.sh
      args:
        executable: /bin/bash
      environment:
        DOCKER_DAEMON_GRAPH: "{{ docker_daemon_graph }}"
  always:
    - name: Start kubelet on the nodes
      command: /bin/true
      notify: start kubelet
      when:
        - inventory_hostname in groups['k8s-cluster']
        - kubelet_status is defined
        - kubelet_status.stdout == "active"

    - name: Start etcd on the nodes
      command: /bin/true
      notify: start etcd
      when:
        - inventory_hostname in groups['etcd']
        - etcd_status is defined
        - etcd_status.stdout == "active"

    - name: Uncordon the nodes
      command: /bin/true
      notify: uncordon node
      when: inventory_hostname in groups['k8s-cluster']
  when:
    - is_docker_upgrade is defined
    - is_docker_upgrade|bool
