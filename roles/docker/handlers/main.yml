---
- name: restart docker
  command: /bin/true
  notify:
    - Docker | clean up orphans
    - Docker | reload systemd
    - Docker | reload docker.socket
    - Docker | reload docker
    - Docker | pause while Docker restarts
    - Docker | wait for docker
    
- name: Docker | clean up orphans
  script: clean-up-orphans.sh
  args:
    executable: /bin/bash

- name: Docker | reload systemd
  shell: systemctl daemon-reload

- name: Docker | reload docker.socket
  service:
    name: docker.socket
    state: restarted
  when: ansible_os_family in ['CoreOS', 'Container Linux by CoreOS']

- name: Docker | reload docker
  service:
    name: docker
    state: restarted

- name: Docker | pause while Docker restarts
  pause:
    seconds: 10
    prompt: "Waiting for docker restart"

- name: Docker | wait for docker
  command: "{{ docker_bin_dir }}/docker images"
  register: docker_ready
  retries: 10
  delay: 5
  until: docker_ready.rc == 0
  
- name: start kubelet
  service:
    name: kubelet
    state: started
    
- name: start etcd
  service:
    name: etcd
    state: started
  
- name: uncordon node
  command: /bin/true
  notify: 
    - Master | wait for the apiserver to be running
    - Master| uncordon node
  when: needs_cordoning|default(false)
  
- name: Master | wait for the apiserver to be running
  uri:
    url: "{{ kube_apiserver_endpoint }}/healthz"
    validate_certs: no
    client_cert: "{{ kube_apiserver_client_cert }}"
    client_key: "{{ kube_apiserver_client_key }}"
  register: result
  until: result.status == 200
  retries: 20
  delay: 10
  delegate_to: "{{ groups['kube-master'][0] }}"
  ignore_errors: yes
  
- name: Master| uncordon node
  command: "{{ bin_dir }}/kubectl uncordon {{ ansible_hostname }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  ignore_errors: yes