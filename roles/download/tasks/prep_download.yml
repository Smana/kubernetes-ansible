---
- name: prep_download | Set image info command for containerd
  set_fact:
    image_info_command: "{{ bin_dir }}/crictl images --verbose | awk -F ': ' '/RepoTags|RepoDigests/ {print $2}' | tr '\n' ','"
  when: container_manager == 'containerd'

- name: prep_download | Set image pull command for containerd
  set_fact:
    image_pull_command: "{{ bin_dir }}/crictl pull"
  when: container_manager in ['crio' ,'containerd']

- name: prep_download | Register docker images info
  shell: "{{ image_info_command }}"
  no_log: true
  register: docker_images
  failed_when: false
  changed_when: false
  check_mode: no
  when: download_container

- name: prep_download | On download delegate, check if passwordless root is possible
  command: "true"
  delegate_to: "{{ download_delegate }}"
  run_once: true
  register: test_become
  changed_when: false
  ignore_errors: true
  become: true
  when:
  - download_delegate | length > 0
  tags:
  - asserts

- name: prep_download | On download delegate, check if user has access to docker without using sudo
  shell: "{{ docker_bin_dir }}/docker images"
  delegate_to: "{{ download_delegate }}"
  run_once: true
  register: test_docker
  changed_when: false
  ignore_errors: true
  no_log: true
  become: false
  when:
  - download_delegate | length > 0
  tags:
  - asserts

- name: prep_download | Parse the outputs of the previous commands
  set_fact:
    user_in_docker_group: "{{ not test_docker.failed }}"
    user_can_become_root: "{{ not test_become.failed }}"
  when:
  - download_delegate | length > 0
  tags:
  - asserts

- name: prep_download | Check that local user is in group or can become root
  assert:
    that: "user_in_docker_group or user_can_become_root"
    msg: >-
      Error: User is not in docker group and cannot become root on download delegate.
      When download_delegate is set, at least one of these two conditions must be met
      on the download_delegate host.
  when:
  - download_delegate | length > 0
  tags:
  - asserts
