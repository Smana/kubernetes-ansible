---
- name: set_download_facts | Initialize download_facts
  set_fact:
    download_facts: "{{ dict() }}"

- name: set_download_facts | Set if containers should be pulled by digest
  vars:
    pull_by_digest: |
      {%- if download.sha256 is defined and download.sha256 -%}
        { 'pull_by_digest': True }
      {%- else -%}
        { 'pull_by_digest': False }
      {%- endif -%}
  set_fact:
    download_facts: "{{ pull_by_digest | combine(download_facts) }}"
  when: download.container

- name: set_download_facts | Set image pull name
  vars:
    pull_name: |
      {%- if download_facts.pull_by_digest -%}
        { 'pull_name': "{{ download.repo }}@sha256:{{ download.sha256 }}" }
      {%- else -%}
        { 'pull_name': "{{ download.repo }}:{{ download.tag }}" }
      {%- endif -%}
  set_fact:
    download_facts: "{{ pull_name | combine(download_facts) }}"
  when: download.container

- name: set_container_facts | Set download and cache paths
  vars:
    file_name: >-
      {%- if download.file -%}
        {{ download.dest | basename }}
      {%- elif download.container -%}
        {{ download_facts.pull_name | regex_replace('/|\0|:', '_') }}
      {%- endif -%}
    download_path: |
      {%- if download.file -%}
        {%- if not download_delegate -%}
          { 'download_path': "{{ download.dest }}" }
        {%- else -%}
          { 'download_path': "{{ download_dir }}/{{ file_name }}" }
        {%- endif -%}
      {%- elif download.container -%}
        { 'download_path': "{{ download_dir }}/images/{{ file_name }}" }
      {%- endif -%}
    cache_path: |
      {%- if download.file -%}
        { 'cache_path': "{{ download_cache_dir }}/{{ file_name }}" }
      {%- elif download.container -%}
        { 'cache_path': "{{ download_cache_dir }}/images/{{ file_name }}" }
      {%- endif -%}
    node_cache_path: |
      {%- if download.file -%}
        { 'node_cache_path': "{{ download_node_cache_dir }}/{{ file_name }}" }
      {%- elif download.container -%}
        { 'node_cache_path': "{{ download_node_cache_dir }}/images/{{ file_name }}" }
      {%- endif -%}
  set_fact:
    download_facts: "{{ cache_path | combine(node_cache_path) | combine(download_path) | combine(download_facts) }}"

- name: set_download_facts | Check file integrity at destination
  stat:
    path: "{{ download.dest }}"
    checksum_algorithm: sha256
    get_attributes: false
    get_checksum: yes
    get_mime: false
  register: file_stat

- name: set_downloads_facts | Set if download is required
  vars:
    download_required: |
      {%- if download.container -%}
        {%- if not download_always_pull and download_facts.pull_name in docker_images.stdout.split(',') -%}
          { 'download_required': false }
        {%- else -%}
          { 'download_required': true }
        {%- endif -%}
      {%- elif download.file -%}
        {%- if file_stat.stat.exists and download.sha256 == file_stat.stat.checksum -%}
          { 'download_required': false }
        {%- else -%}
          { 'download_required': true }
        {%- endif -%}
      {%- endif -%}
  set_fact:
    download_facts: "{{ download_required | combine(download_facts) }}"

- name: set_downloads_facts | Check if download is available in node cache
  stat:
    path: "{{ download_facts.node_cache_path }}"
  register: node_cache_download
  changed_when: false
  become: false
  when: download_node_cache

- name: set_download_facts | Set is_node_cached
  vars:
    is_node_cached: "{ 'is_node_cached': {{ node_cache_download.stat.exists | default(false) }} }"
  set_fact:
    download_facts: "{{ is_node_cached | combine(download_facts) }}"
  when: download_node_cache

- name: set_downloads_facts | Check if download is available in cache
  stat:
    path: "{{ download_facts.cache_path }}"
  register: cache_download
  run_once: true
  changed_when: false
  delegate_to: "{{ download_cache_host }}"
  delegate_facts: no
  become: false
  when: download_cache

- name: set_downloads_facts | Set is_cached if download is cached
  vars:
    is_cached: "{ 'is_cached': {{ cache_download.stat.exists | default(false) }} }"
  set_fact:
    download_facts: "{{ is_cached | combine(download_facts) }}"
  when: download_cache
