---
- name: Gen_certs | create etcd cert dir
  file:
    path: "{{ etcd_cert_dir }}"
    group: "{{ etcd_cert_group }}"
    state: directory
    owner: kube
    mode: 0700
    recurse: yes

- name: "Gen_certs | create etcd script dir (on {{groups['etcd'][0]}})"
  file:
    path: "{{ etcd_script_dir }}"
    state: directory
    owner: root
    mode: 0700
  run_once: yes
  when: inventory_hostname == groups['etcd'][0]
  delegate_to: "{{groups['etcd'][0]}}"

- name: "Gen_certs | create etcd cert dir (on {{groups['etcd'][0]}})"
  file:
    path: "{{ etcd_cert_dir }}"
    group: "{{ etcd_cert_group }}"
    state: directory
    owner: kube
    recurse: yes
    mode: 0700
  run_once: yes
  when: inventory_hostname == groups['etcd'][0]
  delegate_to: "{{groups['etcd'][0]}}"

- name: Gen_certs | write openssl config
  template:
    src: "openssl.conf.j2"
    dest: "{{ etcd_config_dir }}/openssl.conf"
  run_once: yes
  delegate_to: "{{groups['etcd'][0]}}"
  when:
    - gen_certs|default(false)
    - inventory_hostname == groups['etcd'][0]

- name: Gen_certs | copy certs generation script
  copy:
    src: "make-ssl-etcd.sh"
    dest: "{{ etcd_script_dir }}/make-ssl-etcd.sh"
    mode: 0700
  run_once: yes
  delegate_to: "{{groups['etcd'][0]}}"
  when:
    - gen_certs|default(false)
    - inventory_hostname == groups['etcd'][0]

- name: Gen_certs | run cert generation script
  command: "bash -x {{ etcd_script_dir }}/make-ssl-etcd.sh -f {{ etcd_config_dir }}/openssl.conf -d {{ etcd_cert_dir }}"
  environment:
    - MASTERS: "{% for m in groups['etcd'] %}
                  {% if gen_node_certs[m] %}
                    {{ m }}
                  {% endif %}
                {% endfor %}"
    - HOSTS: "{% for h in (groups['k8s-cluster'] + groups['calico-rr']|default([]))|unique %}
                {% if gen_node_certs[h] %}
                    {{ h }}
                {% endif %}
              {% endfor %}"
  run_once: yes
  delegate_to: "{{groups['etcd'][0]}}"
  when:
    - gen_certs|default(false)
    - inventory_hostname == groups['etcd'][0]
  notify: set etcd_secret_changed

- set_fact:
    all_master_certs: "['ca-key.pem',
                      {% for node in groups['etcd'] %}
                      'admin-{{ node }}.pem',
                      'admin-{{ node }}-key.pem',
                      'member-{{ node }}.pem',
                      'member-{{ node }}-key.pem',
                      {% endfor %}]"
    my_master_certs: ['ca-key.pem',
                      'admin-{{ inventory_hostname }}.pem',
                      'admin-{{ inventory_hostname }}-key.pem',
                      'member-{{ inventory_hostname }}.pem',
                      'member-{{ inventory_hostname }}-key.pem']
    all_node_certs: "['ca.pem',
                    {% for node in (groups['k8s-cluster'] + groups['calico-rr']|default([]))|unique %}
                    'node-{{ node }}.pem',
                    'node-{{ node }}-key.pem',
                    {% endfor %}]"
    my_node_certs: ['ca.pem', 'node-{{ inventory_hostname }}.pem', 'node-{{ inventory_hostname }}-key.pem']
  tags:
    - facts

- name: Gen_certs | Gather etcd master certs
  command: "tar cfz - -C {{ etcd_cert_dir }} -T /dev/stdin"
  args:
    input: "{{ my_master_certs|join(' ') }} {{ all_node_certs|join(' ') }}"
  register: etcd_master_cert_data
  no_log: true
  check_mode: no
  delegate_to: "{{groups['etcd'][0]}}"
  when: inventory_hostname in groups['etcd'] and sync_certs|default(false) and
        inventory_hostname != groups['etcd'][0]
  notify: set etcd_secret_changed

- name: Gen_certs | Gather etcd node certs
  command: "tar cfz - -C {{ etcd_cert_dir }} -T /dev/stdin"
  args:
    stdin: "{{ my_node_certs|join(' ') }}"
  register: etcd_node_cert_data
  no_log: true
  check_mode: no
  delegate_to: "{{groups['etcd'][0]}}"
  when: (('calico-rr' in groups and inventory_hostname in groups['calico-rr']) or
        inventory_hostname in groups['k8s-cluster']) and
        sync_certs|default(false) and inventory_hostname not in groups['etcd']
  notify: set etcd_secret_changed

- name: Gen_certs | Unpack certs on masters
  command: "tar xz -C {{ etcd_cert_dir }}"
  args:
    stdin: "{{ etcd_master_cert_data.stdout }}"
  no_log: true
  changed_when: false
  check_mode: no
  when: inventory_hostname in groups['etcd'] and sync_certs|default(false) and
        inventory_hostname != groups['etcd'][0]
  notify: set secret_changed

- name: Gen_certs | Copy certs on nodes
  command: "tar xz -C {{ etcd_cert_dir }}"
  args:
    stdin: "{{ etcd_node_cert_data.stdout }}"
  no_log: true
  changed_when: false
  when: sync_certs|default(false) and
        inventory_hostname not in groups['etcd']

- name: Gen_certs | check certificate permissions
  file:
    path: "{{ etcd_cert_dir }}"
    group: "{{ etcd_cert_group }}"
    state: directory
    owner: kube
    mode: "640"
    recurse: yes
