---
- name: "Check_certs | Register certs that have already been generated on first etcd node"
  find:
    paths: "{{ etcd_cert_dir }}"
    patterns: "ca.pem,node*.pem,member*.pem,admin*.pem"
    get_checksum: true
  delegate_to: "{{ groups['etcd'][0] }}"
  register: etcdcert_master
  run_once: true

- name: "Check_certs | Set default value for 'sync_certs', 'gen_certs' and 'etcd_secret_changed' to false"
  set_fact:
    sync_certs: false
    etcd_secret_changed: false

- name: "Check certs | Register ca and etcd admin/member certs on etcd hosts"
  stat:
    path: "{{ item }}"
    get_attributes: no
    get_checksum: yes
    get_mime: no
  register: etcd_member_certs
  when: inventory_hostname in groups['etcd']
  loop: "{{ [etcd_cert_dir + '/ca.pem'] + cert_files.master }}"

- name: "Check certs | Register ca and etcd node certs on kubernetes hosts"
  stat:
    path: "{{ item }}"
  register: etcd_node_certs
  when: inventory_hostname in groups['k8s_cluster']
  loop: "{{ [etcd_cert_dir + '/ca.pem'] + cert_files.node }}"

- name: "Check_certs | Set 'gen_*_certs' groups to track which nodes needs to have certs generated on first etcd node"
  vars:
    existing_certs: etcdcert_master.files | map(attribute='path')
  ansible.builtin.group_by:
    key: "gen_{{ item.node_type }}_certs_{{ force_etcd_cert_refresh or item.certs is not subset(existing_certs) }}"
  loop: "{{ cert_files | dict2items(key_name='node_type', value_name='certs') }}"

- name: "Check_certs | Set 'etcd_member_requires_sync' to true if ca or member/admin cert and key don't exist on etcd member or checksum doesn't match"
  set_fact:
    etcd_member_requires_sync: true
  when:
    - "'etcd' in group_names"
    - etcd_member_certs.results | map(attribute='stat.checksum', default='DOES_NOT_EXIST')
      | intersect(etcdcert_master.files | map(attribute='checksum', default='')) | length
      != (etcd_member_certs.results | length)
    # We assume that:
    # - files either exists and have a checksum, or (exclusive) don't exists and don't have a checksum
    # - checksum collisions for certificates files between different hosts are impossible.
    #
    # If all expected files exists and have a checksum matching one in the etcdcert_master => no sync needed

- name: "Check_certs | Set 'kubernetes_host_requires_sync' to true if ca or node cert and key don't exist on kubernetes host or checksum doesn't match"
  set_fact:
    kubernetes_host_requires_sync: true
  when:
    - "'k8s_cluster' in group_names and 'etcd' not in group_names"
    - etcd_node_certs.results | map(attribute='stat.checksum', default='DOES_NOT_EXIST')
      | intersect(etcdcert_master.files | map(attribute='checksum', default='')) | length
      != (etcd_node_certs.results | length)
    # Same logic

- name: "Check_certs | Set 'sync_certs' to true"
  set_fact:
    sync_certs: true
  when:
    - etcd_member_requires_sync | default(false) or
      kubernetes_host_requires_sync | default(false) or
      'gen_master_certs_True' in group_names or
      'gen_node_certs_True' in group_names
