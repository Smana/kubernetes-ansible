---
- name: Kubernetes Apps | Wait for kube-apiserver
  uri:
    url: "{{ kube_apiserver_endpoint }}/healthz"
    validate_certs: no
    client_cert: "{{ kube_apiserver_client_cert }}"
    client_key: "{{ kube_apiserver_client_key }}"
  register: result
  until: result.status == 200
  retries: 10
  delay: 2
  when: inventory_hostname == groups['kube-master'][0]

- name: Kubernetes Apps | Cleanup DNS
  import_tasks: tasks/cleanup_dns.yml
  when:
    - inventory_hostname == groups['kube-master'][0]
  tags:
    - upgrade
    - coredns
    - nodelocaldns

- name: Kubernetes Apps | CoreDNS
  import_tasks: "tasks/coredns.yml"
  when:
    - dns_mode in ['coredns', 'coredns_dual']
    - inventory_hostname == groups['kube-master'][0]
  tags:
    - coredns

- name: Kubernetes Apps | nodelocalDNS
  import_tasks: "tasks/nodelocaldns.yml"
  when:
    - enable_nodelocaldns
    - inventory_hostname == groups['kube-master'] | first
  tags:
    - nodelocaldns

- name: Kubernetes Apps | Start Resources
  kube:
    namespace: "kube-system"
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ (coredns_manifests.results|default([]) + coredns_secondary_manifests.results|default([]) + nodelocaldns_manifests.results|default([])) | selectattr('skipped', 'undefined') | map(attribute='item') | map(attribute='file') | map('regex_replace', '^(.*)$', kube_config_dir+'/\\1') | list }}"
    state: "latest"
  when:
    - dns_mode != 'none'
    - inventory_hostname == groups['kube-master'][0]
  register: resource_result
  until: resource_result is succeeded
  retries: 4
  delay: 5
  tags:
    - coredns
    - nodelocaldns

- name: Kubernetes Apps | Netchecker
  import_tasks: tasks/netchecker.yml
  when: deploy_netchecker
  tags:
    - netchecker

- name: Kubernetes Apps | Dashboard
  import_tasks: tasks/dashboard.yml
  when: dashboard_enabled
  tags:
    - dashboard
