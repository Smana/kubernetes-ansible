---

- name: Cert Manager | Remove legacy addon dir and manifests
  file:
    path: "{{ kube_config_dir }}/addons/cert_manager"
    state: absent
  when:
    - inventory_hostname == groups['kube-master'][0]
  tags:
    - upgrade

- name: Cert Manager | Remove legacy namespace
  shell: |
    {{ bin_dir }}/kubectl delete namespace {{ cert_manager_namespace }}
  ignore_errors: yes
  when:
    - inventory_hostname == groups['kube-master'][0]
  tags:
    - upgrade

- name: Cert Manager | Create addon dir
  file:
    path: "{{ kube_config_dir }}/addons/cert_manager"
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: Cert Manager | Create manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/cert_manager/{{ item.file }}"
  with_items:
    - { name: 00-namespace, file: 00-namespace.yml, type: ns }
    - { name: sa-cert-manager, file: sa-cert-manager.yml, type: sa }
    - { name: crd-certificate, file: crd-certificate.yml, type: crd }
    - { name: crd-clusterissuer, file: crd-clusterissuer.yml, type: crd }
    - { name: crd-issuer, file: crd-issuer.yml, type: crd }
    - { name: clusterrole-cert-manager, file: clusterrole-cert-manager.yml, type: clusterrole }
    - { name: clusterrolebinding-cert-manager, file: clusterrolebinding-cert-manager.yml, type: clusterrolebinding }
    - { name: deploy-cert-manager, file: deploy-cert-manager.yml, type: deploy }
  register: cert_manager_manifests
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: Cert Manager | Apply manifests
  kube:
    name: "{{ item.item.name }}"
    namespace: "{{ cert_manager_namespace }}"
    kubectl: "{{ bin_dir }}/kubectl"
    resource: "{{ item.item.type }}"
    filename: "{{ kube_config_dir }}/addons/cert_manager/{{ item.item.file }}"
    state: "latest"
  with_items: "{{ cert_manager_manifests.results }}"
  when:
    - inventory_hostname == groups['kube-master'][0]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> 32c3f0f5... Upgrade JetStack Cert-Manager to v0.15.2
- name: Cert Manager | Wait for Webhook pods become ready
  command: "{{ bin_dir }}/kubectl wait po --namespace={{ cert_manager_namespace }} --selector app=webhook --for=condition=Ready --timeout=600s"
  register: cert_manager_webhook_pods_ready
  when: inventory_hostname == groups['kube-master'][0]
<<<<<<< HEAD
=======
=======
>>>>>>> 18217cfc... Upgrade JetStack Cert-Manager to v0.15.2
=======

>>>>>>> a9fc15ec... Upgrade JetStack Cert-Manager to v0.15.2
=======

>>>>>>> 18217cfc... Upgrade JetStack Cert-Manager to v0.15.2
- name: Cert Manager | Wait for all Webhook pods become created
  command: "kubectl get po --namespace={{ cert_manager_namespace }} --output=jsonpath='{.items[*].metadata.name}'"
  with_items:
    - cert-manager-webhook
  register: cert_manager_webhook_pods_created
  until: item in cert_manager_webhook_pods_created.stdout
  when: inventory_hostname == groups['kube-master'][0]
  retries: 10
  delay: 30

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 5bdc4cce... Upgrade JetStack Cert-Manager to v0.15.2
- name: Cert Manager | Wait for Webhook pods become ready
  command: "{{ bin_dir }}/kubectl wait po --namespace={{ cert_manager_namespace }} --selector app=webhook --for=condition=Ready --timeout=600s"
  register: cert_manager_webhook_pods_ready
<<<<<<< HEAD
  when: inventory_hostname == groups['kube-master'][0] and cert_manager_webhook_pods_created is succeeded
<<<<<<< HEAD
>>>>>>> a9fc15ec... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> 18217cfc... Upgrade JetStack Cert-Manager to v0.15.2
=======
  when: inventory_hostname == groups['kube-master'][0]
>>>>>>> 5bdc4cce... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> 32c3f0f5... Upgrade JetStack Cert-Manager to v0.15.2
=======
=======
>>>>>>> 18217cfc... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> 5bdc4cce... Upgrade JetStack Cert-Manager to v0.15.2
- name: Cert Manager | Wait for Webhook pods become ready
  command: "{{ bin_dir }}/kubectl wait po --namespace={{ cert_manager_namespace }} --selector app=webhook --for=condition=Ready --timeout=600s"
  register: cert_manager_webhook_pods_ready
<<<<<<< HEAD
  when: inventory_hostname == groups['kube-master'][0] and cert_manager_webhook_pods_created is succeeded
<<<<<<< HEAD
>>>>>>> a9fc15ec... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> 18217cfc... Upgrade JetStack Cert-Manager to v0.15.2
=======
  when: inventory_hostname == groups['kube-master'][0]
>>>>>>> 5bdc4cce... Upgrade JetStack Cert-Manager to v0.15.2

- name: Cert Manager | Create ClusterIssuer manifest
  template:
    src: "clusterissuer-cert-manager.yml.j2"
    dest: "{{ kube_config_dir }}/addons/cert_manager/clusterissuer-cert-manager.yml"
  register: cert_manager_clusterissuer_manifest
  when:
    - inventory_hostname == groups['kube-master'][0] and cert_manager_webhook_pods_ready is succeeded

- name: Cert Manager | Apply ClusterIssuer manifest
  kube:
    name: "clusterissuer-cert-manager"
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/cert_manager/clusterissuer-cert-manager.yml"
    state: "latest"
  when: inventory_hostname == groups['kube-master'][0] and cert_manager_clusterissuer_manifest is succeeded
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 740ba8c1... Downgrade Cert-Manager to v0.11.1 to identify CI build issues
=======
>>>>>>> 32c3f0f5... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> a9fc15ec... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> 18217cfc... Upgrade JetStack Cert-Manager to v0.15.2
=======
>>>>>>> 740ba8c1... Downgrade Cert-Manager to v0.11.1 to identify CI build issues
