---
- name: Hosts | populate inventory into hosts file
  blockinfile:
    dest: /etc/hosts
    block: |-
      {% for item in (groups['k8s-cluster'] + groups['etcd'] + groups['calico-rr']|default([]))|unique -%}{{ hostvars[item]['access_ip'] | default(hostvars[item]['ip'] | default(hostvars[item]['ansible_default_ipv4']['address'])) }}{% if (item != hostvars[item]['ansible_hostname']) %} {{ hostvars[item]['ansible_hostname'] }} {{ hostvars[item]['ansible_hostname'] }}.{{ dns_domain }}{% endif %} {{ item }} {{ item }}.{{ dns_domain }}
      {% endfor %}
    state: present
    create: yes
    backup: yes
    marker: "# Ansible inventory hosts {mark}"
  when: populate_inventory_to_hosts_file

- name: Hosts | populate kubernetes loadbalancer address into hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ apiserver_loadbalancer_domain_name }}$"
    line: "{{ loadbalancer_apiserver.address }} {{ apiserver_loadbalancer_domain_name }}"
    state: present
    backup: yes
  when:
    - loadbalancer_apiserver is defined
    - loadbalancer_apiserver.address is defined

- name: Hosts | Retrieve hosts file content
  slurp:
    src: /etc/hosts
  register: etc_hosts_content

- name: Hosts | Extract existing entries for localhost from hosts file
  set_fact:
    entry: "{{ item | regex_replace('[ ]+', ' ')|regex_replace('#.+$')|trim }}"
  with_items: "{{ (etc_hosts_content['content'] | b64decode).split('\n') }}"
  register: etc_hosts_localhosts
  when:
    - etc_hosts_content.content is defined
    - (item|match('^::1 .*') or item|match('^127.0.0.1 .*'))

- name: Hosts | Convert extract entries for localhost as dict
  set_fact:
    etc_hosts_localhosts_dict: >-
      {% set splitted = item.split(' ') %}{{ etc_hosts_localhosts_dict|default({}) | combine({splitted[0]: splitted[1::] }) }}
  with_items: "{{ etc_hosts_localhosts.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.entry') | list }}"

- name: Hosts | Initiate target hosts file entries dict and filter unwanted values
  set_fact:
    etc_hosts_localhosts_dict_target: >-
      {%- set target_entries = [] -%}
      {%- for entry in item.value -%}
      {%- if entry not in etc_hosts_filter.get(item.key,[]) -%}
      {%- set DO = target_entries.append(entry) -%}
      {%- endif -%}
      {%- endfor -%}
      {{ etc_hosts_localhosts_dict_target|default({}) | combine({item.key: target_entries}) }}
  with_dict: "{{etc_hosts_localhosts_dict}}"

- name: Hosts | Update target hosts file entries dict with required entries
  set_fact:
    etc_hosts_localhosts_dict_target: >-
      {{ etc_hosts_localhosts_dict_target|default({}) | combine({item.ip: (etc_hosts_localhosts_dict_target[item.ip]|default([]) + item.entries)|unique}) }}
  with_items:
    - {ip: '127.0.0.1', entries: ['localhost', 'localhost.localdomain']}
    - {ip: '::1', entries: ['localhost6', 'localhost6.localdomain']}

- name: Hosts | Update (if necessary) hosts file
  lineinfile:
    dest: /etc/hosts
    line: "{{ item.key }} {{ item.value|join(' ') }}"
    regexp: "^{{ item.key }}.*$"
    state: present
    backup: yes
  with_dict: "{{ etc_hosts_localhosts_dict_target }}"
