---
- name: Check ansible version
  import_playbook: ansible_version.yml

- name: Ensure compatibility with old groups
  import_playbook: legacy_groups.yml

- hosts: bastion[0]
  gather_facts: False
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
    - { role: kubernetes.kubespray.bastion_ssh_config, tags: ["localhost", "bastion"] }

- name: Bootstrap any new workers
  hosts: kube_node
  strategy: linear
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: false
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
    - { role: kubernetes.kubespray.bootstrap_os, tags: bootstrap_os }

- name: Gather facts
  tags: always
  import_playbook: facts.yml

- name: Generate the etcd certificates beforehand
  hosts: etcd
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
    - { role: kubernetes.kubespray.etcd, tags: etcd, etcd_cluster_setup: false }

- name: Download images to ansible host cache via first kube_control_plane node
  hosts: kube_control_plane[0]
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults, when: "not skip_downloads and download_run_once and not download_localhost" }
    - { role: kubernetes.kubespray.kubernetes.preinstall, tags: preinstall, when: "not skip_downloads and download_run_once and not download_localhost" }
    - { role: kubernetes.kubespray.download, tags: download, when: "not skip_downloads and download_run_once and not download_localhost" }

- name: Target only workers to get kubelet installed and checking in on any new nodes(engine)
  hosts: kube_node
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
    - { role: kubernetes.kubespray.kubernetes.preinstall, tags: preinstall }
    - { role: kubernetes.kubespray.container_engine, tags: "container_engine", when: deploy_container_engine }
    - { role: kubernetes.kubespray.download, tags: download, when: "not skip_downloads" }
    - { role: kubernetes.kubespray.etcd, tags: etcd, etcd_cluster_setup: false, when: "not etcd_kubeadm_enabled|default(false)" }

- name: Target only workers to get kubelet installed and checking in on any new nodes(node)
  hosts: kube_node
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
    - { role: kubernetes.kubespray.kubernetes.node, tags: node }

- name: Upload control plane certs and retrieve encryption key
  hosts: kube_control_plane | first
  environment: "{{ proxy_disable_env }}"
  gather_facts: False
  tags: kubeadm
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
  tasks:
    - name: Upload control plane certificates
      command: >-
        {{ bin_dir }}/kubeadm init phase
        --config {{ kube_config_dir }}/kubeadm-config.yaml
        upload-certs
        --upload-certs
      environment: "{{ proxy_disable_env }}"
      register: kubeadm_upload_cert
      changed_when: false
    - name: set fact 'kubeadm_certificate_key' for later use
      set_fact:
        kubeadm_certificate_key: "{{ kubeadm_upload_cert.stdout_lines[-1] | trim }}"
      when: kubeadm_certificate_key is not defined

- name: Target only workers to get kubelet installed and checking in on any new nodes(network)
  hosts: kube_node
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env }}"
  roles:
    - { role: kubernetes.kubespray.kubespray_defaults }
    - { role: kubernetes.kubespray.kubernetes.kubeadm, tags: kubeadm }
    - { role: kubernetes.kubespray.kubernetes.node_label, tags: node_label }
    - { role: kubernetes.kubespray.network_plugin, tags: network }
